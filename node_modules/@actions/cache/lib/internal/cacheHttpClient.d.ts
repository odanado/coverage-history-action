import { IHttpClientResponse, ITypedResponse } from '@actions/http-client/interfaces';
import { CompressionMethod } from './constants';
import { ArtifactCacheEntry, InternalCacheOptions } from './contracts';
import { UploadOptions } from '../options';
export declare function getCacheVersion(paths: string[], compressionMethod?: CompressionMethod): string;
export declare function retry<T>(name: string, method: () => Promise<T>, getStatusCode: (arg0: T) => number | undefined, maxAttempts?: number): Promise<T>;
export declare function retryTypedResponse<T>(name: string, method: () => Promise<ITypedResponse<T>>, maxAttempts?: number): Promise<ITypedResponse<T>>;
export declare function retryHttpClientResponse<T>(name: string, method: () => Promise<IHttpClientResponse>, maxAttempts?: number): Promise<IHttpClientResponse>;
export declare function getCacheEntry(keys: string[], paths: string[], options?: InternalCacheOptions): Promise<ArtifactCacheEntry | null>;
export declare function downloadCache(archiveLocation: string, archivePath: string): Promise<void>;
export declare function reserveCache(key: string, paths: string[], options?: InternalCacheOptions): Promise<number>;
export declare function saveCache(cacheId: number, archivePath: string, options?: UploadOptions): Promise<void>;
